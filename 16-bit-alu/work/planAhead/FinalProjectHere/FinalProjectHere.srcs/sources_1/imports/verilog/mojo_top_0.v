/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [15:0] M_a_d, M_a_q = 1'h0;
  reg [15:0] M_b_d, M_b_q = 1'h0;
  reg [15:0] M_display_d, M_display_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_1 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [1-1:0] M_sc_inc_state;
  stateCounter_2 sc (
    .clk(clk),
    .rst(rst),
    .inc_state(M_sc_inc_state)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [16-1:0] M_myAlu_f;
  wire [3-1:0] M_myAlu_error;
  wire [1-1:0] M_myAlu_overflow;
  reg [16-1:0] M_myAlu_a;
  reg [16-1:0] M_myAlu_b;
  reg [6-1:0] M_myAlu_alufn;
  alu_4 myAlu (
    .a(M_myAlu_a),
    .b(M_myAlu_b),
    .alufn(M_myAlu_alufn),
    .f(M_myAlu_f),
    .error(M_myAlu_error),
    .overflow(M_myAlu_overflow)
  );
  
  reg [15:0] f;
  
  
  localparam IDLE_state = 6'd0;
  localparam ADD1_state = 6'd1;
  localparam ADD2_state = 6'd2;
  localparam ADD3_state = 6'd3;
  localparam ADD4_state = 6'd4;
  localparam SUB1_state = 6'd5;
  localparam SUB2_state = 6'd6;
  localparam SUB3_state = 6'd7;
  localparam SUB4_state = 6'd8;
  localparam AND1_state = 6'd9;
  localparam AND2_state = 6'd10;
  localparam OR1_state = 6'd11;
  localparam OR2_state = 6'd12;
  localparam XOR1_state = 6'd13;
  localparam XOR2_state = 6'd14;
  localparam A1_state = 6'd15;
  localparam A2_state = 6'd16;
  localparam SHL1_state = 6'd17;
  localparam SHL2_state = 6'd18;
  localparam SHR1_state = 6'd19;
  localparam SHR2_state = 6'd20;
  localparam SRA1_state = 6'd21;
  localparam SRA2_state = 6'd22;
  localparam CMPEQ1_state = 6'd23;
  localparam CMPEQ2_state = 6'd24;
  localparam CMPLT1_state = 6'd25;
  localparam CMPLT2_state = 6'd26;
  localparam CMPLT3_state = 6'd27;
  localparam CMPLE1_state = 6'd28;
  localparam CMPLE2_state = 6'd29;
  localparam CMPLE3_state = 6'd30;
  localparam MUL1_state = 6'd31;
  localparam MUL2_state = 6'd32;
  localparam DIV1_state = 6'd33;
  localparam DIV2_state = 6'd34;
  localparam WRONGADD_state = 6'd35;
  localparam FAIL_state = 6'd36;
  localparam SUCCESS_state = 6'd37;
  
  reg [5:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_b_d = M_b_q;
    M_a_d = M_a_q;
    M_display_d = M_display_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 16'hc111;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    if (io_button[0+0-:1] == 1'h1) begin
      M_a_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
      M_display_d = M_a_q;
    end
    if (io_button[2+0-:1] == 1'h1) begin
      M_b_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
      M_display_d = M_b_q;
    end
    if (io_button[4+0-:1] == 1'h1) begin
      M_display_d = M_myAlu_f;
    end
    M_myAlu_a = M_a_q;
    M_myAlu_b = M_b_q;
    M_myAlu_alufn = io_dip[16+0+5-:6];
    io_led[0+15-:16] = {M_display_q[8+7-:8], M_display_q[0+7-:8]};
    io_led[16+4+3-:4] = {M_myAlu_overflow, M_myAlu_error};
    
    case (M_state_q)
      IDLE_state: begin
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = ADD1_state;
        end
        if (io_button[3+0-:1] == 1'h1) begin
          M_state_d = WRONGADD_state;
        end
      end
      WRONGADD_state: begin
        M_seg_values = 16'h0000;
        M_myAlu_alufn = 6'h00;
        M_myAlu_a = 16'hffff;
        M_myAlu_b = 16'hfffe;
        f = M_myAlu_f;
        if (f == 16'hfffc && M_sc_inc_state == 1'h1) begin
          M_state_d = SUCCESS_state;
        end else begin
          if (f != 16'hfffc && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      ADD1_state: begin
        M_seg_values = 16'h0001;
        M_myAlu_alufn = 6'h00;
        M_myAlu_a = 16'h0096;
        M_myAlu_b = 16'h001e;
        f = M_myAlu_f;
        if (f == 16'h00b4 && M_sc_inc_state == 1'h1) begin
          M_state_d = ADD2_state;
        end else begin
          if (f != 16'h00b4 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      ADD2_state: begin
        M_seg_values = 16'h0002;
        M_myAlu_alufn = 6'h00;
        M_myAlu_a = 16'h0096;
        M_myAlu_b = 16'hffe2;
        f = M_myAlu_f;
        if (f == 16'h0078 && M_sc_inc_state == 1'h1) begin
          M_state_d = ADD3_state;
        end else begin
          if (f != 16'h0078 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      ADD3_state: begin
        M_seg_values = 16'h0003;
        M_myAlu_alufn = 6'h00;
        M_myAlu_a = 16'hff6a;
        M_myAlu_b = 16'h001e;
        f = M_myAlu_f;
        if (f == 16'hff88 && M_sc_inc_state == 1'h1) begin
          M_state_d = ADD4_state;
        end else begin
          if (f != 16'hff88 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      ADD4_state: begin
        M_seg_values = 16'h0004;
        M_myAlu_alufn = 6'h00;
        M_myAlu_a = 16'h0000;
        M_myAlu_b = 16'h0000;
        f = M_myAlu_f;
        if (f == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = SUB1_state;
        end else begin
          if (f != 16'h0000 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SUB1_state: begin
        M_seg_values = 16'h0005;
        M_myAlu_alufn = 6'h01;
        M_myAlu_a = 16'h0096;
        M_myAlu_b = 16'h001e;
        f = M_myAlu_f;
        if (f == 16'h0078 && M_sc_inc_state == 1'h1) begin
          M_state_d = SUB2_state;
        end else begin
          if (f != 16'h0078 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SUB2_state: begin
        M_seg_values = 16'h0006;
        M_myAlu_alufn = 6'h01;
        M_myAlu_a = 16'h0096;
        M_myAlu_b = 16'hffe2;
        f = M_myAlu_f;
        if (f == 16'h00b4 && M_sc_inc_state == 1'h1) begin
          M_state_d = SUB3_state;
        end else begin
          if (f != 16'h00b4 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SUB3_state: begin
        M_seg_values = 16'h0007;
        M_myAlu_alufn = 6'h01;
        M_myAlu_a = 16'hff6a;
        M_myAlu_b = 16'h001e;
        f = M_myAlu_f;
        if (f == 16'hff4c && M_sc_inc_state == 1'h1) begin
          M_state_d = SUB4_state;
        end else begin
          if (f != 16'hff4c && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SUB4_state: begin
        M_seg_values = 16'h0008;
        M_myAlu_alufn = 6'h01;
        M_myAlu_a = 16'hff6a;
        M_myAlu_b = 16'hffe2;
        f = M_myAlu_f;
        if (f == 16'hff88 && M_sc_inc_state == 1'h1) begin
          M_state_d = AND1_state;
        end else begin
          if (f != 16'hff88 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      AND1_state: begin
        M_seg_values = 16'h0009;
        M_myAlu_alufn = 6'h18;
        M_myAlu_a = 16'hff11;
        M_myAlu_b = 16'hfffc;
        f = M_myAlu_f;
        if (f == 16'hff10 && M_sc_inc_state == 1'h1) begin
          M_state_d = AND2_state;
        end else begin
          if (f != 16'hff10 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      AND2_state: begin
        M_seg_values = 16'h0010;
        M_myAlu_alufn = 6'h18;
        M_myAlu_a = 16'h8f11;
        M_myAlu_b = 16'hf3fe;
        f = M_myAlu_f;
        if (f == 16'h8310 && M_sc_inc_state == 1'h1) begin
          M_state_d = OR1_state;
        end else begin
          if (f != 16'h8310 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      OR1_state: begin
        M_seg_values = 16'h0011;
        M_myAlu_alufn = 6'h1e;
        M_myAlu_a = 16'hff11;
        M_myAlu_b = 16'hfffc;
        f = M_myAlu_f;
        if (f == 16'hfffd && M_sc_inc_state == 1'h1) begin
          M_state_d = OR2_state;
        end else begin
          if (f != 16'hfffd && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      OR2_state: begin
        M_seg_values = 16'h0012;
        M_myAlu_alufn = 6'h1e;
        M_myAlu_a = 16'h8f11;
        M_myAlu_b = 16'hf3fe;
        f = M_myAlu_f;
        if (f == 16'hffff && M_sc_inc_state == 1'h1) begin
          M_state_d = XOR1_state;
        end else begin
          if (f != 16'hffff && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      XOR1_state: begin
        M_seg_values = 16'h0013;
        M_myAlu_alufn = 6'h16;
        M_myAlu_a = 16'hff11;
        M_myAlu_b = 16'hfffc;
        f = M_myAlu_f;
        if (f == 16'h00ed && M_sc_inc_state == 1'h1) begin
          M_state_d = XOR2_state;
        end else begin
          if (f != 16'h00ed && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      XOR2_state: begin
        M_seg_values = 16'h0014;
        M_myAlu_alufn = 6'h16;
        M_myAlu_a = 16'h8f11;
        M_myAlu_b = 16'hf3fe;
        f = M_myAlu_f;
        if (f == 16'h7cef && M_sc_inc_state == 1'h1) begin
          M_state_d = A1_state;
        end else begin
          if (f != 16'h7cef && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      A1_state: begin
        M_seg_values = 16'h0015;
        M_myAlu_alufn = 6'h1a;
        M_myAlu_a = 16'hff11;
        M_myAlu_b = 16'hfffc;
        f = M_myAlu_f;
        if (f == 16'hff11 && M_sc_inc_state == 1'h1) begin
          M_state_d = A2_state;
        end else begin
          if (f != 16'hff11 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      A2_state: begin
        M_seg_values = 16'h0016;
        M_myAlu_alufn = 6'h1a;
        M_myAlu_a = 16'h8f11;
        M_myAlu_b = 16'hf3fe;
        f = M_myAlu_f;
        if (f == 16'h8f11 && M_sc_inc_state == 1'h1) begin
          M_state_d = SHL1_state;
        end else begin
          if (f != 16'h8f11 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SHL1_state: begin
        M_seg_values = 16'h0017;
        M_myAlu_alufn = 6'h20;
        M_myAlu_a = 16'h00ff;
        M_myAlu_b = 16'h0000;
        f = M_myAlu_f;
        if (f == 16'h00ff && M_sc_inc_state == 1'h1) begin
          M_state_d = SHL2_state;
        end else begin
          if (f != 16'h00ff && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SHL2_state: begin
        M_seg_values = 16'h0018;
        M_myAlu_alufn = 6'h20;
        M_myAlu_a = 16'h00ff;
        M_myAlu_b = 16'h0008;
        f = M_myAlu_f;
        if (f == 16'hff00 && M_sc_inc_state == 1'h1) begin
          M_state_d = SHR1_state;
        end else begin
          if (f != 16'hff00 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SHR1_state: begin
        M_seg_values = 16'h0019;
        M_myAlu_alufn = 6'h21;
        M_myAlu_a = 16'h00ff;
        M_myAlu_b = 16'h0000;
        f = M_myAlu_f;
        if (f == 16'h00ff && M_sc_inc_state == 1'h1) begin
          M_state_d = SHR2_state;
        end else begin
          if (f != 16'h00ff && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SHR2_state: begin
        M_seg_values = 16'h0020;
        M_myAlu_alufn = 6'h21;
        M_myAlu_a = 16'h80ff;
        M_myAlu_b = 16'h0009;
        f = M_myAlu_f;
        if (f == 16'h0040 && M_sc_inc_state == 1'h1) begin
          M_state_d = SRA1_state;
        end else begin
          if (f != 16'h0040 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SRA1_state: begin
        M_seg_values = 16'h0021;
        M_myAlu_alufn = 6'h23;
        M_myAlu_a = 16'hef0f;
        M_myAlu_b = 16'h0008;
        f = M_myAlu_f;
        if (f == 16'hffef && M_sc_inc_state == 1'h1) begin
          M_state_d = SRA2_state;
        end else begin
          if (f != 16'hffef && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SRA2_state: begin
        M_seg_values = 16'h0022;
        M_myAlu_alufn = 6'h23;
        M_myAlu_a = 16'h6f0f;
        M_myAlu_b = 16'h0008;
        f = M_myAlu_f;
        if (f == 16'h006f && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPEQ1_state;
        end else begin
          if (f != 16'h006f && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPEQ1_state: begin
        M_seg_values = 16'h0023;
        M_myAlu_alufn = 6'h33;
        M_myAlu_a = 16'h0064;
        M_myAlu_b = 16'h0064;
        f = M_myAlu_f;
        if (f == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPEQ2_state;
        end else begin
          if (f != 16'h0001 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPEQ2_state: begin
        M_seg_values = 16'h0024;
        M_myAlu_alufn = 6'h33;
        M_myAlu_a = 16'h0064;
        M_myAlu_b = 16'h0001;
        f = M_myAlu_f;
        if (f == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPLT1_state;
        end else begin
          if (f != 16'h0000 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPLT1_state: begin
        M_seg_values = 16'h0025;
        M_myAlu_alufn = 6'h35;
        M_myAlu_a = 16'h0064;
        M_myAlu_b = 16'h0064;
        f = M_myAlu_f;
        if (f == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPLT2_state;
        end else begin
          if (f != 16'h0000 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPLT2_state: begin
        M_seg_values = 16'h0026;
        M_myAlu_alufn = 6'h35;
        M_myAlu_a = 16'h0064;
        M_myAlu_b = 16'h0065;
        f = M_myAlu_f;
        if (f == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPLT3_state;
        end else begin
          if (f != 16'h0001 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPLT3_state: begin
        M_seg_values = 16'h0027;
        M_myAlu_alufn = 6'h35;
        M_myAlu_a = 16'h0065;
        M_myAlu_b = 16'h0064;
        f = M_myAlu_f;
        if (f == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPLE1_state;
        end else begin
          if (f != 16'h0000 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPLE1_state: begin
        M_seg_values = 16'h0028;
        M_myAlu_alufn = 6'h37;
        M_myAlu_a = 16'h0064;
        M_myAlu_b = 16'h0064;
        f = M_myAlu_f;
        if (f == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPLE2_state;
        end else begin
          if (f != 16'h0001 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPLE2_state: begin
        M_seg_values = 16'h0029;
        M_myAlu_alufn = 6'h37;
        M_myAlu_a = 16'h0064;
        M_myAlu_b = 16'h0065;
        f = M_myAlu_f;
        if (f == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = CMPLE3_state;
        end else begin
          if (f != 16'h0001 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      CMPLE3_state: begin
        M_seg_values = 16'h0030;
        M_myAlu_alufn = 6'h37;
        M_myAlu_a = 16'h0065;
        M_myAlu_b = 16'h0064;
        f = M_myAlu_f;
        if (f == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = MUL1_state;
        end else begin
          if (f != 16'h0000 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      MUL1_state: begin
        M_seg_values = 16'h0031;
        M_myAlu_alufn = 6'h02;
        M_myAlu_a = 16'h0000;
        M_myAlu_b = 16'h0000;
        f = M_myAlu_f;
        if (f == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = MUL2_state;
        end else begin
          if (f != 16'h0000 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      MUL2_state: begin
        M_seg_values = 16'h0032;
        M_myAlu_alufn = 6'h02;
        M_myAlu_a = 16'hfffb;
        M_myAlu_b = 16'h0007;
        f = M_myAlu_f;
        if (f == 16'hffdd && M_sc_inc_state == 1'h1) begin
          M_state_d = DIV1_state;
        end else begin
          if (f != 16'hffdd && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      DIV1_state: begin
        M_seg_values = 16'h0033;
        M_myAlu_alufn = 6'h03;
        M_myAlu_a = 16'h0006;
        M_myAlu_b = 16'h0002;
        f = M_myAlu_f;
        if (f == 16'h0003 && M_sc_inc_state == 1'h1) begin
          M_state_d = DIV2_state;
        end else begin
          if (f != 16'h0003 && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      DIV2_state: begin
        M_seg_values = 16'h0034;
        M_myAlu_alufn = 6'h03;
        M_myAlu_a = 16'hfffa;
        M_myAlu_b = 16'h0002;
        f = M_myAlu_f;
        if (f == 16'hfffd && M_sc_inc_state == 1'h1) begin
          M_state_d = SUCCESS_state;
        end else begin
          if (f != 16'hfffd && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      FAIL_state: begin
        M_seg_values = 16'hbad1;
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SUCCESS_state: begin
        M_seg_values = 16'hdad1;
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_q <= 1'h0;
      M_b_q <= 1'h0;
      M_display_q <= 1'h0;
    end else begin
      M_a_q <= M_a_d;
      M_b_q <= M_b_d;
      M_display_q <= M_display_d;
    end
  end
  
endmodule
